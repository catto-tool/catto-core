/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 09 16:17:11 GMT 2018
 */

package testselector.util;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ClassPathUpdater_ESTest extends ClassPathUpdater_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        // Undeclared exception!
        try {
            ClassPathUpdater.add((List<String>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("testselector.util.ClassPathUpdater", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        MockFile mockFile0 = new MockFile("8MUc}xl2");
        // Undeclared exception!
        try {
            ClassPathUpdater.add((File) mockFile0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("testselector.util.ClassPathUpdater", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        MockFile mockFile0 = new MockFile("testselector.util.ClassPathUpdater", "");
        MockFile.createTempFile("testselector.util.ClassPathUpdater", "MFY]3RD)$9I~:./", (File) mockFile0);
        ClassPathUpdater.add((File) mockFile0);
        assertTrue(mockFile0.exists());
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("");
        ClassPathUpdater.add((List<String>) linkedList0);
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        URL uRL0 = MockURL.getFtpExample();
        ClassPathUpdater.add(uRL0);
        assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        ClassPathUpdater classPathUpdater0 = new ClassPathUpdater();
    }
}
