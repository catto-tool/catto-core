/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 09 16:15:38 GMT 2018
 */

package testselector.option;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class OptionParser_ESTest extends OptionParser_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        String[] stringArray0 = new String[9];
        stringArray0[0] = "";
        stringArray0[1] = "s";
        stringArray0[2] = "P.2{g]xMTPV1/Rs";
        stringArray0[3] = "3V";
        stringArray0[4] = "";
        stringArray0[5] = "z}V_\"[%M.6 <9zlz";
        stringArray0[6] = "";
        stringArray0[7] = "--=CEON=hy]CIT06EAg";
        OptionParser optionParser0 = new OptionParser(stringArray0);
        try {
            optionParser0.parse();
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Ambiguous option: '--'  (could be: 'old_classpaths', 'new_classpaths', 'old_outdir', 'new_outdir')
            //
            verifyException("org.apache.commons.cli.DefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        String[] stringArray0 = new String[4];
        stringArray0[0] = "l4[";
        stringArray0[1] = "";
        stringArray0[2] = "-`]";
        OptionParser optionParser0 = new OptionParser(stringArray0);
        try {
            optionParser0.parse();
            fail("Expecting exception: Exception");

        } catch (Exception e) {
            //
            // Unrecognized option: -`]
            //
            verifyException("org.apache.commons.cli.DefaultParser", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        String[] stringArray0 = new String[0];
        OptionParser optionParser0 = new OptionParser(stringArray0);
        String[] stringArray1 = optionParser0.getOldProjectVersionTarget();
        assertNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        String[] stringArray0 = new String[0];
        OptionParser optionParser0 = new OptionParser(stringArray0);
        // Undeclared exception!
        try {
            optionParser0.parse();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        String[] stringArray0 = new String[3];
        OptionParser optionParser0 = new OptionParser(stringArray0);
        String[] stringArray1 = optionParser0.getNewProjectVersionTarget();
        assertNull(stringArray1);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        String[] stringArray0 = new String[0];
        OptionParser optionParser0 = new OptionParser(stringArray0);
        String string0 = optionParser0.getNewProjectVersionOutDir();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        String[] stringArray0 = new String[3];
        OptionParser optionParser0 = new OptionParser(stringArray0);
        String string0 = optionParser0.getOldProjectVersionOutDir();
        assertNull(string0);
    }
}
